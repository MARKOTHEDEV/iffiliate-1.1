

first create an app called iffliate landing page
work on it statc files
create it template 
    index -- DONE
    product -- DONE
    pricing -- DONE
    about us -- WHEN DONE DO THE LINKING --DONE
        :team --DONE
        sorport --DONE
        dashboard
        contact--half_DONE
        blog  -- done AT BLOG 
            NOT DONE SEARCH FOR ATICLE -- done
            BLOG DETAIL page -- done

    sign up:
            WHEN USER FIRES THIS VIEW WE CREATE THE USER AND RUN THE SUBSCRIPTION LOGIC GIVING THE USER FREE SUBSCRIPTION  --done
            currenttly at signals -- done
    sign in:
        check user sub and log them in --done

    PAYMENTPAGE  -- depending on what plan free or paid give them access to the page
        ALLOW payment to work with paystack -- done
        when payment is made change the actuall userMembership to free -- done
        create User model -DONE
LET USER: -- container-fluid is the replaceable class --done
FIX CREATEING USER IN THE ADMIN -- done


DONT ALLOW USERS TO PAY AGAIN IF THEY HAVE SUB -- done
FIX ALLOW USER TO PAY ONES SO IF THEY HAVE A SUB THEN DON ALLOW THEM TO PAY --done

    dashboard WORK:
            done dashboard home page and some other config
            not done:
                other dashboard pages :
                            transaction SHOULD consit of 
                                    shop payment -- done
                                    userMembership payment --done
                                    user request payment --done

                                    CSS CLASS FOR TABLE STYLYING:
                                        btn-outline-success = for complted payment - done
                                        btn-outline-warning = for pending payment  -- done
                                        ==STOPED AD PAGINATION IN transactionS AND DROP DOWN
                need a django mixin to prevent free users--done
                retrict user from some pages if the are on free mode--done
                not added read pay funtionality -- done
                filter number of news depending on the sub -- done
                create a function that limits the user if he is above his pay ---done found in the user app


not added transaction page --done
    


let user read news and get paid depending on thier plan --done
after the read and get paid scheme is working it will now lead us to doing CronJob

SO I NEED A CRON DUB TO ---:
            create a function that get about 50 news -- we need a web crawler so i will create --done 20 news
                    :we neeed a helper function to check if our db is up to 50
            and delete the news database clean after 24hrs --done not tested
            CHECK USER SUB STATUS so we can disqualify them like check every night -- done i set the hours to be every 23 hours


create user dashboard:
    make template work --done
    onread of new pay them accordingly-- done
    load money on the index page --done
    load transaction show user all his payment and paid --done

1)create html file that has a form asking user for thier --  done
2)account number and and bank which is going to be loaded by UserPaymentPreparation in the frontend -- done
3) on submit check if valiability if it okay and info to UserRequestPayment Model --done
4) if not send a message to the paging tell them some kind of eroor return by UserPaymentPreparation --done
5) 



find a logic to pay the user when they  request for payment: -- done
    so when user request for payment we check his amount if it above a specific amount and if the payment date is due:
        begin
            if it true we accept then we create a instance of a model called UserRequestPayment --done

        UserRequestPayment MOdel: --done
                is going to contain 
                username foregin key with the logged in user
                amount -- 
                ispaid -- boolean field
                isreadyForPayment -- boolean field
                account_number -- the user account number 
                account_name -- the user account number 
                bank_code
                bank_name
                recipient_code = will save this when i make a request to https://api.paystack.co/transferrecipient


   Iffilate  Admin Page:

   first we need to sort out the template:
dashboard  which is the index.html :
    will show - amount iffliate is owing -- by calculating the UserRequestPayment table excluding the is_paid=true colunm -done
    count how ,many customer we have --done
    amout that has been paid to Iffilate  --done


    view withdraws requested - in the index page show 6 recent -- done
    view newly Members  -- in the index page show 6 recent --done

    admin PAYMENTPAGE logic:
            in the admin we going to sperate the paid and not paid show the admin what we havent paid
            so when they click pay -- there will be two ways to it
                Is either the Admin pays all users that are thier Ispaid is false
                OR 
                hand pick them and send them to the back end...

            

        end

Pay user once they login for the day --  done:USED A CRON JOB!!!
    check the user last login if it was user.last_login.day === today
    if true pay the user

show all customers --  done 
show all customers that have been payed -- not done
show all customers that requested for a payment --  done
create logout view the link should be at the dashboard and home page --  done 

1)error page for transaction -- use logout template -- done
3)login with socials--done just remain putting the link in the right button -- done
2)forgot password -- with email--done
            :and add the logic that we would send email like a email verifcation

NOT DONE
fill all links
PRELOADER -- for logining or any rest calls -not done
raffle draw = :

create nessacry template
     Steps:
            If game Open Game Doesnt Exist or He Isnt Logged In We Prevent User From Playing -- done
            else:
                 User Can Play Using Paystack to Pay --done

         Give Admin Right To Create And End A Game   --Done
            When It created THe Game Will Be open(meaing users can pay and play):-- done
                create a template that --: -- done
                                    shows all Raffle Draw And Indecate the Closed One The Open One Should Be On top --done
                                    the Detail Should Show (THe detail But if It already closed Dont Show Close Btn Again) --done
            on Close Of the Game:
                we create A signal Which Listen To Update Then We Check If the -done witout the use of signal
                        Game Was Closed  and check if (end_game == false) if both are true:
                            We Then Choose The Winner
                            And End the Game 

    Next Task:
        We Need A Button To Trigger The Creation Of A New Raffle Batch: --done
            On Creation Of A New Batch We Need A messaging System That Alert Every  Page That The Raffle Is Open--done
        create A Winner Account Number Column For Each player Which Should Be Optional  --done
        When A User Winns a batch And they have Not Payed Him :- A form Of Account Number Shoiuld Still Be there IN the dashboard--done

        
        The Template That Shows When There Is no Game We Need To Style It Up:--done
            We NEed To Tell The USers When Raffle Are Likely TO Be Played

we also need to create a button to activate the CronJobs -- DONE

1)Correct the Payment For A userMembership Dont USe callbacks Use WebHooks --done
2)We Need To Create A Model FOr Sponsord Post --> just need some js to copy the link to the clipboard and pay the user
    on click of a button  --done
    copy the url --done
    send a fecth request to the backend -done
    we we check a model that saves seen soponsored Post  --done
                if the user and the url exits and if there is an actuall Sponsord Post -- half done
                if yes pay the user and send a feed back -- done
                i need to pay them for copying the link -- done


send message if it created --
use loader -- done
for each post that is read send some message  --> write a javascript that checks for when the page loads then tell them what up
create a message that shows if message is open
need to add a form that create the actuall Sponsord Post
        Create,list delete... -- use the admin that django has given


IF U WANT TO UPLOAD TO HEROKU PLEASE UNCOMMENT UR CRON JOBS!!! -- I probaly Should Create A button To activate this Event -- done
make the callback more flexible -- done


fill the environment vars on HEROKU -- done
install whitenoise and configure -- done
test other cron job funtionality -- done
configure s3 bucket for uploading pitures -- 
work on contact form --done
configure google to iffilate -- done
create aB settime out so the messageing system deletes it self wafter some secconds --done for only iffilate_landing page


